name: Backend CI/CD

on:
  push:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: idealclone/instagram-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest
          build-args: |
            DB_HOST=${{ secrets.DB_HOST }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}
            S3_REGION=${{ secrets.S3_REGION }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}
            S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
            OAUTH_CLIENT_ID=${{ secrets.OAUTH_CLIENT_ID }}
            OAUTH_CLIENT_SECRET=${{ secrets.OAUTH_CLIENT_SECRET }}
            FRONTEND_URL=${{ secrets.FRONTEND_URL }}

      - name: Create .env file
        run: |
          cat <<EOF > .env
          DB_HOST=${{ secrets.DB_HOST }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}
          S3_REGION=${{ secrets.S3_REGION }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}
          S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
          OAUTH_CLIENT_ID=${{ secrets.OAUTH_CLIENT_ID }}
          OAUTH_CLIENT_SECRET=${{ secrets.OAUTH_CLIENT_SECRET }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          EOF

      - name: Upload .env to Droplet
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          password: ${{ secrets.DROPLET_PASSWORD }}
          port: 22
          source: ".env"
          target: "/root/"

      - name: Upload docker-compose.yml to Droplet
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          password: ${{ secrets.DROPLET_PASSWORD }}
          port: 22
          source: "docker-compose.yml"
          target: "/root/instagram-deploy"

      - name: Deploy to DigitalOcean Droplet via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          password: ${{ secrets.DROPLET_PASSWORD }}
          port: 22
          script: |
            cd /root/instagram-deploy
            docker-compose pull
            docker-compose down
            docker-compose up -d
